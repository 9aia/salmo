#!/usr/bin/env bash
# This script was generated by bashly 1.3.2 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if ((BASH_VERSINFO[0] < 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] < 2))); then
  printf "bash version 4.2 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
salmox_usage() {
  printf "salmox - A tailored tool for setting up bootable USB drives and installing the desktop environment.\n\n"

  printf "%s\n" "Usage:"
  printf "  salmox COMMAND\n"
  printf "  salmox [COMMAND] --help | -h\n"
  printf "  salmox --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Setup bootable USB drive with Arch Linux. Downloads Arch Linux ISO and sets up a bootable USB drive using Ventoy.\n" "setup_usb"
  printf "  %s   Install complete desktop environment. Installs and configures a complete desktop environment by:\n" "install  "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
salmox_setup_usb_usage() {
  if [[ -n $long_usage ]]; then
    printf "salmox setup_usb\n\n"
    printf "  Setup bootable USB drive with Arch Linux. Downloads Arch Linux ISO and sets up\n  a bootable USB drive using Ventoy.\n  \n  This command will:\n  - Download Arch Linux ISO via torrent\n  - Install Ventoy for USB boot management\n  - Set up the USB drive with Ventoy\n  - Copy the ISO to the USB drive\n\n"
  else
    printf "salmox setup_usb - Setup bootable USB drive with Arch Linux. Downloads Arch Linux ISO and sets up a bootable USB drive using Ventoy.\n\n"
  fi
  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  salmox setup_usb [OPTIONS]\n"
  printf "  salmox setup_usb --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dry-run, -n"
    printf "    Show what would be done without making changes\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  salmox setup_usb\n"
    echo

  fi
}

# :command.usage
salmox_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "salmox install\n\n"
    printf "  Install complete desktop environment. Installs and configures a complete\n  desktop environment by:\n  - Cloning the DE repository\n  - Running installation scripts\n  - Running configuration scripts\n  - Setting up the system\n\n"
  else
    printf "salmox install - Install complete desktop environment. Installs and configures a complete desktop environment by:\n\n"
  fi
  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  salmox install [OPTIONS]\n"
  printf "  salmox install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dry-run, -n"
    printf "    Show what would be done without making changes\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  salmox install\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/logger.sh

enable_auto_colors() {
  if [[ -z ${NO_COLOR+x} && ! -t 1 ]]; then
    NO_COLOR=1
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ "${NO_COLOR:-}" == "" ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    print_in_color "${BLUE}" "[INFO] $1"
}

log_success() {
    print_in_color "${GREEN}" "[SUCCESS] $1"
}

log_warning() {
    print_in_color "${YELLOW}" "[WARNING] $1"
}

log_error() {
    print_in_color "${RED}" "[ERROR] $1"
}

log_debug() {
    print_in_color "${BLUE}" "[DEBUG] $1"
}

# src/lib/utils.sh

assert_not_root() {
    if [[ $EUID -eq 0 ]]; then
        log_error "This script should not be run as root. Use sudo for specific commands."
        exit 1
    fi
}

update_system() {
    log_info "Updating system packages..."
    sudo pacman -Syu --noconfirm
    log_success "System updated successfully"
}

check_system_requirements() {
    log_info "Checking system requirements..."

    # Check if running on Arch
    if ! command -v pacman &> /dev/null; then
        log_error "This script is designed for Arch Linux systems"
        exit 1
    fi

    # Check if yay is installed
    if ! command -v yay &> /dev/null; then
        log_warning "yay is not installed. Installing yay..."
        sudo pacman -S --needed git base-devel --noconfirm
        git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        makepkg -si --noconfirm
        cd "$SCRIPT_DIR"
    fi

    log_success "System requirements check completed"
}

configure_mirrors() {
    log_info "Configuring pacman mirrors for Brazil..."

    # Check if reflector is installed
    if ! command -v reflector &> /dev/null; then
        log_info "Reflector is not installed. Installing..."
        sudo pacman -S reflector --noconfirm
        log_success "Reflector installed"
    fi

    # Configure mirrors
    sudo reflector --country Brazil --latest 20 --protocol https --sort rate --save /etc/pacman.d/mirrorlist

    log_success "Pacman mirrors configured successfully"
}

# :command.command_functions
# :command.function
salmox_setup_usb_command() {

  # src/setup_usb_command.sh
  setup_usb() {
      log_info "Initializing bootable USB setup..."

      log_info "Installing dependencies..."
      sudo pacman -S git curl transmission-cli
      yay -S ventoy-bin --noconfirm
      log_success "Dependencies installed"

      transmission-cli "$(curl --silent '[url]https://archlinux.org/feeds/releases/[/url]' | xml sel -t -v '//channel/item[1]/link' ; printf '%s\n' 'torrent')"

      log_info "Downloading Arch Linux torrent..."
      curl https://archlinux.org/releng/releases/2025.08.01/torrent/archlinux-2025.08.01-x86_64.iso.torrent -O archlinux.iso.torrent
      log_success "Arch Linux torrent downloaded"

      log_info "Downloading Arch Linux ISO..."
      transmission-cli https://archlinux.org/releng/releases/2025.08.01/torrent/archlinux-2025.08.01-x86_64.iso.torrent -O archlinux.iso

      # Check if USB drives are available
      log_info "Checking for available USB drives..."
      usb_drives=$(lsblk -o NAME,SIZE,TYPE,MOUNTPOINT | grep -E "disk|part" | grep -v "loop")

      if [ -z "$usb_drives" ]; then
          log_error "No USB drives found. Please insert a USB drive and try again."
          exit 1
      fi

      echo "Available storage devices:"
      echo "$usb_drives"

      # Prompt user to select USB drive
      read -p "Enter the USB drive device (e.g., /dev/sdb): " usb_device

      # Validate USB device exists
      if [ ! -b "$usb_device" ]; then
          log_error "Device $usb_device does not exist or is not a block device."
          exit 1
      fi

      # Check if USB is mounted and unmount if necessary
      mounted_partitions=$(mount | grep "$usb_device" | awk '{print $1}')
      if [ -n "$mounted_partitions" ]; then
          log_info "USB drive is mounted. Unmounting partitions..."
          for partition in $mounted_partitions; do
              sudo umount "$partition"
              log_info "Unmounted $partition"
          done
      fi

      # Check if USB is writable
      if [ ! -w "$usb_device" ]; then
          log_info "USB drive is not writable by current user. Will use sudo for operations."
      fi

      # TODO: inform if the USB drive is already setup with Ventoy
      log_info "Setting up USB drive with Ventoy..."
      # TODO: finish this
      # TODO: add a option to select the USB drive
      sudo ventoy -i /dev/sdX

      log_info "Copying Arch Linux ISO to USB drive..."
      # TODO: add a option to select the USB drive
      sudo cp archlinux.iso /dev/sdX1

      log_success "Bootable USB setup completed."

      # Confirm if the user wants to reboot
      read -p "Do you want to reboot now? (y/n): " confirm
      if [[ $confirm == "y" ]]; then
          reboot
      fi
  }

  setup_usb

}

# :command.function
salmox_install_command() {

  # src/install_command.sh
  install() {

      assert_not_root
      check_system_requirements
      update_system

      # Download this repo
      git clone https://github.com/luisfuturist/de.git
      cd de

      # Run the install and config scripts
      bash src/scripts/install-de.sh
      bash src/scripts/config-de.sh

      # TODO: run scripts/prepare.sh

      log_success "Installation and configuration completed"

      # Ask if the user wants to reboot
      read -p "Do you want to reboot now? (y/n): " confirm
      if [[ $confirm == "y" ]]; then
          reboot
      fi
  }

  setup_basic_system_config() {
      log_info "Setting up basic system configuration..."

      # Set keyboard layout
      log_info "Setting keyboard layout to br-abnt2..."
      setxkbmap -layout br -variant abnt2

      # Set timezone
      log_info "Setting timezone to America/Sao_Paulo..."
      sudo timedatectl set-timezone America/Sao_Paulo

      # Locale
      # TODO: check if this is working
      log_info "Setting locale to en_US.UTF-8..."
      sudo sed -i 's/^#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
      sudo locale-gen
      echo "LANG=en_US.UTF-8" | sudo tee /etc/locale.conf > /dev/null

      # System language
      log_info "Setting system language to en_US..."
      localectl set-locale LANG=en_US.UTF-8

      log_success "Basic system configuration completed"
  }

  #setup_basic_system_config
  install

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        salmox_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    setup_usb | s)
      action="setup_usb"
      shift
      salmox_setup_usb_parse_requirements "$@"
      shift $#
      ;;

    install | i)
      action="install"
      shift
      salmox_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      salmox_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
salmox_setup_usb_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        salmox_setup_usb_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="setup_usb"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dry-run | -n)

        # :flag.case_no_arg
        args['--dry-run']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
salmox_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        salmox_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dry-run | -n)

        # :flag.case_no_arg
        args['--dry-run']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.user_hooks
before_hook() {
  # src/before.sh

  # Constants
  USERNAME="${SUDO_USER:-$USER}"
  HOME_DIR="/home/$USERNAME"

  # Show info
  echo "Salmox - Desktop Environment Installer"
  echo "https://github.com/9aia/salmo"
  echo ""

  echo "User: $USERNAME"
  echo "Home directory: $HOME_DIR"
  echo ""

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "setup_usb") salmox_setup_usb_command ;;
    "install") salmox_install_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # :command.start
  command_line_args=("$@")
  initialize
  run "${command_line_args[@]}"
fi
